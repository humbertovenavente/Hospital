#!/bin/bash

# Script para ejecutar an√°lisis de SonarQube por separado
# Hospital Management System - An√°lisis de Calidad

echo "üîç Iniciando an√°lisis de calidad con SonarQube..."
echo "=================================================="

# Verificar que SonarQube est√© disponible
echo "üì° Verificando conexi√≥n con SonarQube..."
if ! curl -f http://localhost:9000/api/system/status > /dev/null 2>&1; then
    echo "‚ùå Error: SonarQube no est√° disponible en http://localhost:9000"
    echo "   Aseg√∫rate de que est√© ejecut√°ndose: docker-compose up -d"
    exit 1
fi
echo "‚úÖ SonarQube est√° disponible"

# Verificar que SonarQube Scanner est√© instalado
if ! command -v sonar-scanner > /dev/null 2>&1; then
    echo "‚ùå Error: SonarQube Scanner no est√° instalado"
    echo "   Instala con: sudo apt-get install sonarqube-scanner"
    exit 1
fi
echo "‚úÖ SonarQube Scanner est√° disponible"

# Variables de configuraci√≥n
SONAR_HOST="http://localhost:9000"
SONAR_TOKEN="${SONAR_TOKEN:-your-sonarqube-token-here}"

if [ "$SONAR_TOKEN" = "your-sonarqube-token-here" ]; then
    echo "‚ö†Ô∏è  ADVERTENCIA: No se ha configurado SONAR_TOKEN"
    echo "   Exporta la variable: export SONAR_TOKEN=tu-token-aqui"
    echo "   O edita este script para incluir tu token"
fi

echo ""
echo "üöÄ Iniciando an√°lisis del BACKEND..."
echo "====================================="

# Compilar backend para generar clases
echo "üî® Compilando backend..."
cd backend
mvn clean compile test-compile -q
if [ $? -ne 0 ]; then
    echo "‚ùå Error compilando backend"
    exit 1
fi
cd ..

# An√°lisis del BACKEND
echo "üîç Analizando BACKEND con SonarQube..."
sonar-scanner \
    -Dsonar.projectKey=hospital-backend \
    -Dsonar.projectName="Hospital Backend - Java/Quarkus" \
    -Dsonar.projectVersion=1.0 \
    -Dsonar.sources=backend/src/main/java \
    -Dsonar.tests=backend/src/test/java \
    -Dsonar.java.source=17 \
    -Dsonar.java.binaries=backend/target/classes \
    -Dsonar.java.test.binaries=backend/target/test-classes \
    -Dsonar.coverage.jacoco.xmlReportPaths=backend/target/site/jacoco/jacoco.xml \
    -Dsonar.host.url="$SONAR_HOST" \
    -Dsonar.token="$SONAR_TOKEN" \
    -Dsonar.exclusions="**/target/**,**/*.min.js,**/*.min.css,**/generated/**" \
    -Dsonar.qualitygate.wait=true

if [ $? -eq 0 ]; then
    echo "‚úÖ An√°lisis del BACKEND completado exitosamente"
    echo "   üìä Ver resultados en: $SONAR_HOST/dashboard?id=hospital-backend"
else
    echo "‚ùå Error en el an√°lisis del BACKEND"
fi

echo ""
echo "üöÄ Iniciando an√°lisis del FRONTEND..."
echo "======================================"

# Generar cobertura del frontend
echo "üß™ Ejecutando tests del frontend para generar cobertura..."
npm run test:unit -- --coverage
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Advertencia: Los tests del frontend fallaron, pero continuaremos con el an√°lisis"
fi

# An√°lisis del FRONTEND
echo "üîç Analizando FRONTEND con SonarQube..."
sonar-scanner \
    -Dsonar.projectKey=hospital-frontend \
    -Dsonar.projectName="Hospital Frontend - Vue.js/TypeScript" \
    -Dsonar.projectVersion=1.0 \
    -Dsonar.sources=src \
    -Dsonar.language=js,ts \
    -Dsonar.typescript.tsconfigPath=tsconfig.json \
    -Dsonar.javascript.lcov.reportsPaths=coverage/lcov.info \
    -Dsonar.typescript.lcov.reportsPaths=coverage/lcov.info \
    -Dsonar.host.url="$SONAR_HOST" \
    -Dsonar.token="$SONAR_TOKEN" \
    -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/coverage/**,**/*.min.js,**/*.min.css,**/public/**,**/e2e/**" \
    -Dsonar.qualitygate.wait=true

if [ $? -eq 0 ]; then
    echo "‚úÖ An√°lisis del FRONTEND completado exitosamente"
    echo "   üìä Ver resultados en: $SONAR_HOST/dashboard?id=hospital-frontend"
else
    echo "‚ùå Error en el an√°lisis del FRONTEND"
fi

echo ""
echo "üéâ An√°lisis de calidad completado!"
echo "=================================="
echo "üìä Proyectos en SonarQube:"
echo "   ‚Ä¢ Backend: $SONAR_HOST/dashboard?id=hospital-backend"
echo "   ‚Ä¢ Frontend: $SONAR_HOST/dashboard?id=hospital-frontend"
echo ""
echo "üí° Consejos:"
echo "   ‚Ä¢ El backend mostrar√° cobertura de tests si tienes tests unitarios"
echo "   ‚Ä¢ El frontend mostrar√° calidad de c√≥digo JavaScript/TypeScript"
echo "   ‚Ä¢ Revisa los Quality Gates en cada proyecto"


