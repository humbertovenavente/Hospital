node {
    // Configuraci√≥n simplificada para testing
    properties([
        parameters([
            booleanParam(name: 'FORCE_FAIL', defaultValue: false, description: 'Forzar fallo del pipeline para probar notificaciones')
        ])
    ])
    
    try {
        stage('Checkout') {
            echo "üîÑ Iniciando checkout del c√≥digo..."
            deleteDir()
            checkout scm
            echo "üìã Build en rama: ${env.BRANCH_NAME ?: 'main'}"
            echo "‚úÖ Checkout completado"
        }
        
        stage('Setup Environment') {
            echo "‚öôÔ∏è  Configurando entorno..."
            sh '''
                echo "=== Verificando Java ==="
                java -version
                mvn -version
                echo "=== Verificando Git ==="
                git --version
            '''
            echo "‚úÖ Entorno configurado"
        }
        
        stage('Build Backend') {
            echo "üî® Compilando backend..."
            dir('backend') {
                sh '''
                    echo "=== Empaquetando backend ==="
                    mvn clean package -DskipTests
                    echo "=== Backend empaquetado ==="
                '''
            }
            echo "‚úÖ Build completado"
        }
        
        stage('Unit Tests') {
            echo "üß™ Ejecutando tests unitarios..."
            dir('backend') {
                sh '''
                    echo "=== Ejecutando tests ==="
                    mvn test
                    echo "=== Tests completados ==="
                '''
            }
            echo "‚úÖ Tests ejecutados"
        }
        
        stage('SonarQube Analysis') {
            echo "üìä An√°lisis de SonarQube..."
            dir('backend') {
                sh '''
                    echo "   üìà Configurando an√°lisis de cobertura con JaCoCo..."
                    
                    # Verificar que el reporte de JaCoCo existe
                    if [ -f target/site/jacoco/jacoco.xml ]; then
                      echo "   ‚úÖ Reporte de cobertura JaCoCo encontrado: target/site/jacoco/jacoco.xml"
                    else
                      echo "   ‚ö†Ô∏è  Reporte de cobertura JaCoCo no encontrado. Se ejecutar√° sin an√°lisis de cobertura."
                    fi
                    
                    # Configuraci√≥n b√°sica de SonarQube
                    sonar-scanner \
                      -Dsonar.projectKey=hospital-backend-test \
                      -Dsonar.projectName="Hospital Backend Test" \
                      -Dsonar.projectVersion=${BUILD_NUMBER} \
                      -Dsonar.sources=src/main/java \
                      -Dsonar.java.source=17 \
                      -Dsonar.java.binaries=target/classes \
                      -Dsonar.tests=src/test/java \
                      -Dsonar.java.test.binaries=target/test-classes \
                      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                      -Dsonar.coverage.jacoco.reportPaths=target/site/jacoco/jacoco.xml \
                      -Dsonar.host.url=${SONAR_HOST ?: 'http://localhost:9000'} \
                      -Dsonar.token=${SONAR_TOKEN ?: 'test-token'} \
                      -Dsonar.qualitygate.wait=true
                    
                    echo "=== An√°lisis de SonarQube completado ==="
                    echo "   üìä An√°lisis incluye: C√≥digo fuente, Tests unitarios y Cobertura de c√≥digo (JaCoCo)"
                '''
            }
            echo "‚úÖ An√°lisis completado"
        }
        
        stage('Success') {
            echo "üéâ Pipeline completado exitosamente!"
        }
        
    } catch (Exception e) {
        echo "‚ùå Error en el pipeline: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        throw e
    }
}
