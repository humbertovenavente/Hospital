node {
    // Par√°metro para pruebas: permite forzar un fallo controlado y validar notificaciones
    properties([
        parameters([
            booleanParam(name: 'FORCE_FAIL', defaultValue: false, description: 'Forzar fallo del pipeline para probar notificaciones por correo')
            ,
            booleanParam(name: 'BUILD_DOCKER', defaultValue: true, description: 'Construir y desplegar im√°genes Docker (activado por defecto para DEV)')
        ])
    ])
    def DOCKER_REGISTRY = 'hospital-registry'
    def BACKEND_IMAGE = 'hospital-backend'
    def FRONTEND_IMAGE = 'hospital-frontend'
    def VERSION = "${env.BUILD_NUMBER}"
    
    try {
        stage('Checkout') {
            echo "üîÑ Iniciando checkout del c√≥digo..."
            // Limpiar workspace para evitar quedarnos en la rama anterior
            deleteDir()
            checkout scm
            if (env.CHANGE_ID) {
                echo "üîó Pull Request #${env.CHANGE_ID} detectado"
                echo "   Rama origen: ${env.CHANGE_BRANCH}"
                echo "   Rama destino: ${env.CHANGE_TARGET}"
            } else {
                echo "üìã Build directo en rama: ${env.BRANCH_NAME}"
            }
            echo "‚úÖ Checkout completado"

            // Normalizar nombre de rama cuando Jenkins no lo expone (evitar 'null')
            try {
                if (!env.BRANCH_NAME || env.BRANCH_NAME == 'null') {
                    def detected = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    if (detected == 'HEAD') {
                        // En estado detached, forzar uso de 'dev' para desarrollo
                        detected = 'dev'
                        echo "üîç Estado detached detectado, forzando rama: dev"
                    }
                    env.BRANCH_NAME = detected
                    echo "üîñ Rama detectada: ${env.BRANCH_NAME}"
                }
                
                // Verificaci√≥n adicional: si estamos en la rama dev, forzar el nombre
                if (env.BRANCH_NAME == 'dev' || env.BRANCH_NAME == 'develop') {
                    env.BRANCH_NAME = 'dev'
                    echo "‚úÖ Rama dev confirmada: ${env.BRANCH_NAME}"
                }
            } catch (err) {
                echo "‚ö†Ô∏è  No se pudo detectar la rama v√≠a git: ${err}. Usando 'dev' por defecto"
                env.BRANCH_NAME = 'dev'
            }
        }

        // Forzar fallo si est√° habilitado (para probar el pipeline)
        if (params.FORCE_FAIL) {
            error("‚ùå Fallo forzado activado mediante par√°metro FORCE_FAIL")
        }

        stage('Build Backend') {
            echo "üî® Construyendo Backend para DEV..."
            dir('backend') {
                sh '''
                    echo "=== Construyendo Backend (Rama: ''' + env.BRANCH_NAME + ''') ==="
                    chmod +x mvnw
                    ./mvnw clean compile -DskipTests=false
                    echo "‚úÖ Backend construido exitosamente"
                '''
            }
        }

        stage('Test Backend') {
            echo "üß™ Ejecutando tests del Backend..."
            dir('backend') {
                sh '''
                    echo "=== Ejecutando Tests de Backend (Rama: ''' + env.BRANCH_NAME + ''') ==="
                    ./mvnw test jacoco:report
                    echo "‚úÖ Tests del Backend completados"
                '''
                // Publicar resultados de tests
                publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
            }
        }

        stage('Build Frontend') {
            echo "üé® Construyendo Frontend para DEV..."
            sh '''
                echo "=== Construyendo Frontend (Rama: ''' + env.BRANCH_NAME + ''') ==="
                if [ -f package.json ]; then
                    npm ci
                    npm run build
                    echo "‚úÖ Frontend construido exitosamente"
                else
                    echo "‚ùå package.json no encontrado"
                    exit 1
                fi
            '''
        }

        stage('SonarQube Analysis') {
            echo "üìä Ejecutando an√°lisis de SonarQube para DEV..."
            // IMPORTANTE: El nombre debe coincidir con el configurado en "Manage Jenkins > System > SonarQube servers"
            withSonarQubeEnv('SonarQube') {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                    // AN√ÅLISIS DEL BACKEND (con cobertura de tests y configuraci√≥n espec√≠fica para dev)
                    echo "   üîç Analizando BACKEND para rama: ${env.BRANCH_NAME}..."
                    sh '''
                        echo "=== Ejecutando SonarQube Analysis para BACKEND DEV ==="
                        export PATH=$PATH:/opt/sonar-scanner/bin
                        export BRANCH_NAME=''' + env.BRANCH_NAME + '''
                        export BUILD_NUMBER=''' + env.BUILD_NUMBER + '''
                        
                        # Fallbacks: si la integraci√≥n no expone variables, usar valores por defecto
                        export SONAR_HOST=${SONAR_HOST_URL:-http://localhost:9000}
                        export TOKEN_TO_USE=${SONAR_TOKEN:-$SONAR_AUTH_TOKEN}

                        echo "   üîß Usando configuraci√≥n espec√≠fica de DEV para backend..."
                        sonar-scanner -Dproject.settings=sonar-project-backend-dev.properties
                        
                        echo "=== An√°lisis de SonarQube para BACKEND DEV completado ==="
                    '''
                    
                    // AN√ÅLISIS DEL FRONTEND (con configuraci√≥n espec√≠fica para dev)
                    echo "   üîç Analizando FRONTEND para rama: ${env.BRANCH_NAME}..."
                    sh '''
                        echo "=== Ejecutando SonarQube Analysis para FRONTEND DEV ==="
                        export PATH=$PATH:/opt/sonar-scanner/bin
                        export BRANCH_NAME=''' + env.BRANCH_NAME + '''
                        export BUILD_NUMBER=''' + env.BUILD_NUMBER + '''
                        export SONAR_HOST=${SONAR_HOST_URL:-http://localhost:9000}
                        export SONAR_TOKEN=${SONAR_TOKEN:-$SONAR_AUTH_TOKEN}

                        # Verificar que el directorio src existe
                        if [ ! -d "src" ]; then
                            echo "   ‚ùå Error: Directorio src no encontrado"
                            echo "   üìÅ Directorio actual: $(pwd)"
                            echo "   üìÅ Contenido: $(ls -la)"
                            exit 1
                        fi

                        echo "   üîß Usando configuraci√≥n espec√≠fica de DEV para frontend..."
                        sonar-scanner -Dproject.settings=sonar-project-frontend-dev.properties
                        
                        echo "=== An√°lisis de SonarQube para FRONTEND DEV completado ==="
                    '''
                }
            }
        }

        stage('Quality Gate') {
            echo "üö™ Esperando Quality Gate..."
            timeout(time: 5, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    echo "‚ùå Quality Gate fall√≥: ${qg.status}"
                    error "Pipeline abortado debido a falla en Quality Gate"
                } else {
                    echo "‚úÖ Quality Gate pas√≥ exitosamente"
                }
            }
        }

        stage('Deploy DEV') {
            if (params.BUILD_DOCKER) {
                echo "üöÄ Desplegando en entorno de DESARROLLO..."
                
                echo "   üßπ Limpiando contenedores de DEV existentes..."
                sh '''
                  if command -v docker-compose >/dev/null 2>&1; then
                    DC="docker-compose"
                  elif docker compose version >/dev/null 2>&1; then
                    DC="docker compose"
                  else
                    echo "docker-compose no est√° instalado. Instala con: sudo apt-get install -y docker-compose-plugin"; exit 1
                  fi
                  
                  # Detener y limpiar contenedores de DEV existentes
                  echo "üõë Deteniendo contenedores de DEV..."
                  $DC -f docker-compose.dev.yml down 2>/dev/null || true
                  
                  # Forzar detenci√≥n y eliminaci√≥n de contenedores de DEV
                  echo "üóëÔ∏è Forzando limpieza de contenedores de DEV..."
                  docker stop $(docker ps -q --filter name=hospital-backend-dev --filter name=hospital-frontend-dev) 2>/dev/null || true
                  docker rm $(docker ps -aq --filter name=hospital-backend-dev --filter name=hospital-frontend-dev) 2>/dev/null || true
                  
                  # Limpiar contenedores hu√©rfanos de DEV
                  echo "üóëÔ∏è Limpiando contenedores hu√©rfanos de DEV..."
                  docker container prune -f 2>/dev/null || true
                '''
                
                echo "   üê≥ Construyendo y desplegando contenedores de DEV..."
                sh '''
                  # Construir y desplegar servicios de DEV
                  echo "üì¶ Desplegando servicios de DEV..."
                  docker-compose -f docker-compose.dev.yml up -d --build
                  
                  # Conectar backend a la red de Oracle si es necesario
                  echo "üîó Verificando conectividad de red..."
                  sleep 10
                  docker network connect bridge hospital-backend-dev 2>/dev/null || true
                '''
                echo "   ‚è≥ Esperando que los servicios se inicien..."
                sleep 15
                echo "‚úÖ Despliegue en DEV completado exitosamente"
                echo "üåê URLs de acceso DEV:"
                echo "   - Backend: http://localhost:8060"
                echo "   - Frontend: http://localhost:5180"
                echo "   - SonarQube: http://localhost:9000"
            } else {
                echo "‚è≠Ô∏è Construcci√≥n de Docker omitida (BUILD_DOCKER=false)"
            }
        }

        stage('Send Technical Debt Report') {
            echo "üìß Enviando reporte de deuda t√©cnica para DEV..."
            try {
                sh '''
                    echo "=== Enviando Reporte de Deuda T√©cnica DEV ==="
                    # Esperar un poco para asegurar que el backend est√© completamente iniciado
                    sleep 10
                    
                    # Verificar que el backend est√© respondiendo
                    for i in {1..30}; do
                        if curl -f http://localhost:8060/q/health >/dev/null 2>&1; then
                            echo "‚úÖ Backend est√° disponible"
                            break
                        fi
                        echo "‚è≥ Esperando que el backend est√© disponible... ($i/30)"
                        sleep 5
                    done
                    
                    # Enviar reporte de deuda t√©cnica usando el endpoint espec√≠fico
                    curl -X POST http://localhost:8060/api/email/technical-debt \\
                         -H "Content-Type: application/json" \\
                         -d '{
                             "projectKey": "hospital-backend-dev",
                             "projectName": "Hospital Backend - DEV [RAMA DEV]",
                             "recipientEmail": "jflores@unis.edu.gt"
                         }' || echo "‚ö†Ô∏è Error enviando reporte de deuda t√©cnica"
                    
                    echo "‚úÖ Reporte de deuda t√©cnica enviado"
                '''
            } catch (Exception e) {
                echo "‚ö†Ô∏è No se pudo enviar el reporte de deuda t√©cnica: ${e.getMessage()}"
            }
        }
        
        // Notificaci√≥n por correo de √©xito
        try {
            def recipients = 'jflores@unis.edu.gt, jnajar@unis.edu.gt'
            def subject = (env.CHANGE_ID ? "PR #${env.CHANGE_ID} DEV exitoso: ${env.JOB_NAME} #${env.BUILD_NUMBER}" : "Pipeline DEV exitoso: ${env.JOB_NAME} #${env.BUILD_NUMBER} (Rama: ${env.BRANCH_NAME})")
            
            def body = """
Hola equipo,

El pipeline de DESARROLLO se ha ejecutado exitosamente.

üîß INFORMACI√ìN DEL BUILD DEV:
- Job: ${env.JOB_NAME}
- Build: #${env.BUILD_NUMBER}
- Rama: ${env.BRANCH_NAME} [RAMA DEV]
- URL: ${env.BUILD_URL}
- Estado: ‚úÖ EXITOSO

üìä RESULTADOS DE CALIDAD DEV:
- Tests Backend: ‚úÖ Completados
- Tests Frontend: ‚úÖ Completados
- An√°lisis SonarQube: ‚úÖ Completado
- Quality Gate: ‚úÖ PAS√ì

üåê URLs DE ACCESO DEV:
- Backend: http://localhost:8060
- Frontend: http://localhost:5180
- SonarQube: http://localhost:9000
- Jenkins: ${env.BUILD_URL}

üìà PROYECTOS SONARQUBE DEV:
- Backend: hospital-backend-dev
- Frontend: hospital-frontend-dev

üìß REPORTE DE DEUDA T√âCNICA:
Se ha enviado autom√°ticamente el reporte de deuda t√©cnica con indicador [RAMA DEV].

Saludos,
Sistema de CI/CD del Hospital - Entorno DEV
"""
            // Usar Email Extension Plugin
            emailext(
                to: recipients,
                from: 'humbertovenavente7@gmail.com',
                subject: subject,
                body: body,
                mimeType: 'text/plain'
            )
            echo "‚úÖ Notificaci√≥n de √©xito DEV enviada a: ${recipients}"
        } catch (err) {
            echo "‚ö†Ô∏è No se pudo enviar la notificaci√≥n por correo: ${err}"
        }
        
    } catch (Exception e) {
        // Error handling
        if (env.CHANGE_ID) {
            echo "‚ùå Pull Request #${env.CHANGE_ID} DEV fall√≥: ${e.getMessage()}"
        } else {
            echo "‚ùå Pipeline DEV fall√≥ en rama ${env.BRANCH_NAME}: ${e.getMessage()}"
        }
        // Notificaci√≥n por correo a Lead Developer y Product Owner
        try {
            def recipients = 'jflores@unis.edu.gt, jnajar@unis.edu.gt'
            def subject = (env.CHANGE_ID ? "PR #${env.CHANGE_ID} DEV fall√≥: ${env.JOB_NAME} #${env.BUILD_NUMBER}" : "Pipeline DEV fall√≥: ${env.JOB_NAME} #${env.BUILD_NUMBER} (Rama: ${env.BRANCH_NAME})")
            
            def body = """
Hola equipo,

El pipeline de DESARROLLO ha fallado.

üîß INFORMACI√ìN DEL BUILD DEV:
- Job: ${env.JOB_NAME}
- Build: #${env.BUILD_NUMBER}
- Rama: ${env.BRANCH_NAME} [RAMA DEV]
- URL: ${env.BUILD_URL}
- Estado: ‚ùå FALL√ì
- Motivo: ${e.getMessage()}

üìä RESULTADOS DE CALIDAD DEV:
- Tests Backend: ‚ö†Ô∏è Verificar estado
- Tests Frontend: ‚ö†Ô∏è Verificar estado
- An√°lisis SonarQube: ‚ö†Ô∏è Verificar estado

üîß ACCIONES REQUERIDAS:
1. Revisar la consola de Jenkins para m√°s detalles
2. Verificar logs de los servicios DEV
3. Revisar m√©tricas de SonarQube DEV
4. Corregir el problema identificado

üåê URLs DE ACCESO DEV:
- Jenkins: ${env.BUILD_URL}
- SonarQube: http://localhost:9000
- Backend DEV: http://localhost:8060
- Frontend DEV: http://localhost:5180

Por favor revisar la consola para m√°s detalles.

Saludos,
Sistema de CI/CD del Hospital - Entorno DEV
"""
            // Usar Email Extension Plugin (configurado en "Extended E-mail Notification")
            emailext(
                to: recipients,
                from: 'humbertovenavente7@gmail.com',
                subject: subject,
                body: body,
                mimeType: 'text/plain'
            )
            echo "üìß Notificaci√≥n de fallo DEV enviada (emailext) a: ${recipients}"
        } catch (err) {
            echo "‚ö†Ô∏è No se pudo enviar la notificaci√≥n por correo: ${err}"
        }
        throw e
    }
}
